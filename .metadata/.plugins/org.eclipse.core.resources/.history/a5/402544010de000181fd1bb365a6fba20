/*
 * sequencer.h
 *
 *  Created on: Nov 4, 2018
 *      Author: Roman
 */

#ifndef SEQUENCER_HPP_
#define SEQUENCER_HPP_


#include <Globals.hpp>
#include "MIDIparser.hpp"

using namespace MIDI;

extern u32 millis;         // for time measurements

enum SeqOptions {
	SIZE = 8
};

enum class SeqStepAction {  // action bit mask
		ADVANCE = 0x1,
		SKIP = 0x2,
		REPEAT = 0x4,
		SKIP_REPEAT = 0x8,
		JUMP = 0x10
	};

struct SeqStep {
	MIDImessage note;     // midi to send
	u32 length;           // in ms
	SeqStepAction action; // what to do
	u8 repeats;           // how many repeats
	u16 jumpTo;           // jump to this step
};

class Sequencer {
public:
	Sequencer();
	void triggerStep(SeqStep step);
	void advanceStep(void);
	void start(void);
	void pause(void);
	void stop(void);
	u16 seqLength;                       // [1..SeqOptions::SIZE]
	SeqStep sequence[SeqOptions::SIZE];  // the greatest sequence ever)

private:
	u16 currStep;
	u32 prevTime;  //
};




#endif /* SEQUENCER_HPP_ */
